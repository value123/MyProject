apply plugin: 'com.android.application'////声明构建的项目类型android
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'

//设置编译android项目的参数
android {
    //参考:http://www.bubuko.com/infodetail-1008155.html
    //用于编译的sdk的版本,软件开发工具包（外语首字母缩写：SDK、外语全称：Software Development Kit）,使用某种语言来暴露 API，提供头文件、库文件、工具（通常不是 IDE）和范例。
    // 也就是API Level，例如API-19、API-20、API-21等等
    compileSdkVersion 23
    //buildeToolVersion是你构建工具的版本，其中包括了打包工具aapt、dx等等。这个工具的目录位于..your_sdk_path/build-tools/XX.XX.XX,这个版本号一般是API-LEVEL.0.0
    buildToolsVersion "23.0.3"  //编译工具的版本
    //注:你可以用高版本的build-tool去构建一个低版本的sdk工程，例如build-tool的版本为20，去构建一个sdk版本为18的

   /* productFlavors {
        xiaomi0 {
            buildConfigField 'String', 'CHANNEL', '"http://www.flysnow.org2/"'
        }
        xiaomi1 {
            buildConfigField 'String', 'CHANNEL', '"http://www.flysnow.org2/"'
        }
        meizu0 {
            buildConfigField 'String', 'CHANNEL', '"meizu"'
        }
        meizu1 {
            buildConfigField 'String', 'CHANNEL', '"meizu"'
        }
        *//*
        normal {
            buildConfigField 'String', 'API_BASE_URL', '"http://xxx.zuimeia.com/"'
        }
        qa {
            buildConfigField 'String', 'API_BASE_URL', '"http://xxxtest.zuimeia.com/"'
        }
        instant {
            // 这样 会相对快一些
            buildConfigField 'String', 'API_BASE_URL', '"http://xxxtest.zuimeia.com/"'
            applicationId "com.jackson.demo.test"
            packageName 'com.jackson.demo.test'
        }*//*
    }*/

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFile 'proguard-android.txt'
        }
        /*debug {
//            minifyEnabled false
        }*/
//        debuggableRelease.initWith(buildTypes.release)
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.jackson.demo"  //包名
        minSdkVersion 15        //兼容的最小sdk版本
        targetSdkVersion 23    //目标sdk版本
        versionCode 1
        versionName "1.0"
        buildConfigField 'String', 'CHANNEL', '"test"'//申明渠道号字段,自动配置完成后可以到BuildConfig文件中查看
    }

    sourceSets {
        /* xiaomi {
            xiaomi.setRoot('src/xiaomi')
        }
        meizu {
            meizu.('src/meizu')
        }*/

        def sources = initFlavors();

        sources.each { name, value ->
            "$name.name" {
                def rootSrc = "src/"
                if ("$name.name".contains("xiaomi")) {
                    rootSrc += "xiaomi"
                } else if ("$name.name".contains("meizu")) {
                    rootSrc += "meizu"
                } else {
                    rootSrc += "main"
                }

                root rootSrc

            }
        }
    }

    productFlavors {
        def flavors = initFlavors();
        flavors.each { name, value ->
            println "$name.name"
            "$name.name"   {
               // buildConfigField 'String', 'CHANNEL', '"' + "$value" + '"' //动态设置CHANNEL字段的值
            }
        }
    }
}

def class A{
    def name
    def sid
    def reffer
    def channelId
}
/*
def initSourceSets() {
    def map = new HashMap()

    for (i in 0..1) {
        map.put("xiaomi$i", "xiaomi$i");
    }
    for (i in 0..1) {
        map.put("meizu$i", "meizu$i");
    }

    map.each({ key, value ->    //输出打印语句,用于调试,key,value两个参数用于接受每个元素的键/值
        println "$key:$value"
    })
    return map;
}*/

//创建多维的渠道
def initFlavors() {
    def map = new HashMap()
    String[] sids= ["2100","2101"];
    String[] reffers= ["263308","263309"];
    String[] channelIds= ["DX_01","DX_02"];
    for (i in 0..1) {
        def a = new A();
        a.name= "xiaomi"+i
        a.sid = sids[i]
        a.reffer= reffers[i]
        a.channelId = channelIds[i]
        map.put(a, a);
    }
    for (j in 0..1) {
        def b = new A();
        b.name="meizu"+j
        b.sid = "21"+j
        b.reffer="26233"+j
        b.channelId = "DX_"+j;
        map.put(b, b);
//        map.put("meizu$i", "meizu$i");
    }

    map.each({ key, value ->    //输出打印语句,用于调试,key,value两个参数用于接受每个元素的键/值
        println "$key:$value"
    })
    return map;
}


def setup() {
    //输入参数中包含 -Pmc 时才进行多渠道构建
    if (project.hasProperty('mc')) {
        //多渠道构建
        println "multi channel"
        //渠道源
        def path = "./build-type/config.txt"
        //有的渠道是纯数字，不能用来做名字，这里统一加个前缀
        def prefix = "_"
        file(path).eachLine { line ->
            println line
            def f = file("./build-type/$line");
            if (!f.exists()) {
                f.mkdir()
            }
            //针对不同平台，生成不同的 Manifest
            copyManifest(line)
        }
        file(path).eachLine { line ->
            android.buildTypes.create(prefix + line, {
                packageName = 'com.qihigh'
                signingConfig android.signingConfigs.myConfig
                runProguard false
                proguardFile 'proguard-android.txt'
            })
            //println "lalala:" + android.sourceSets
            android.sourceSets.findAll { source ->
                source.name.equals(line)
            }.each { source ->
                println "source:$source.name type:build-type/$line"
                source.setRoot("build-type/$line")
            }
        }
    }
}

def copyManifest(String type) {
    BufferedReader reader = file('./src/main/AndroidManifest.xml').newReader('utf-8')
    StringBuffer _file = new StringBuffer()
    reader.eachLine { line ->
        _file.append(line).append("\n")
    }
    reader.close()

    def dest_file = file("./build-type/$type/AndroidManifest.xml")

    BufferedWriter writer = new BufferedWriter(new FileWriter(dest_file))
    writer.write(_file.toString() + "<!-- $type -->")
    writer.close()
}


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:2.5.0'
    }
}

//这个是解决lint报错的代码

/*
lintOptions {

    abortOnError false

}
*/

def globalConfiguration = rootProject.ext
def gldp = globalConfiguration.appDependencies

//定义依赖包,支持maven/ivy，远程，本地库，也支持单文件
dependencies {
    //单文件依赖
    // compile files('libs/android-support-v4.jar')
    //某个文件夹下面全部依赖
    //compile fileTree(dir: 'libs', include: '*.jar')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //格式: packageName:artifactId:version
    //compileSdkVersion : 要与依赖库对应,否则就会爆出':app:processDebugResources'
    //
    //引用aar:compile(name: 'pulltorefresh', ext: 'aar')

    compile project(':comlib')
    compile project(':pullrefresh')

    //groovy 闭包的省略调用方式,相当于 dependenciesMethod(appDps,{})

    rootProject.dependenciesMethod rootProject.ext.appDps, { type, library, key ->
        if (type == 'compile') {
            compile library
        } else if (type == 'debugCompile') {
            debugCompile library
        } else if (type == 'testCompile') {
            testCompile library
        } else if (type == 'apt') {
            apt library
        }
    }

}


